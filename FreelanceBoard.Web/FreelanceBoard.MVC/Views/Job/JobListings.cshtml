@using FreelanceBoard.MVC.Extensions

@model List<JobViewModel>
@{
    var totalJobs = Model?.Count;
}

<style>
    .create-job-btn {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
        border: none;
        color: white;
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        width: auto !important; /* force to fit content */
        min-width: unset !important; /* remove any enforced min width */
        max-width: unset !important; /* remove any enforced max width */
        flex: 0 0 auto; /* prevent flexbox stretching */
    }



        .create-job-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(99, 102, 241, 0.3);
            color: white;
            text-decoration: none;
        }

    .job-actions {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        gap: 5px;
        z-index: 10;
        opacity: 0.7;
        transition: all 0.3s ease;
    }

    .job-thumb:hover .job-actions {
        opacity: 1;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        transition: all 0.3s ease;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .edit-btn {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

        .edit-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
        }

    .delete-btn {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

        .delete-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

    .job-thumb {
        position: relative;
        overflow: visible;
    }

    .job-image-box-wrap {
        position: relative;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
        color: white;
        border-radius: 20px 20px 0 0;
        border: none;
    }

        .modal-header .btn-close {
            filter: brightness(0) invert(1);
        }

    .modal-body {
        padding: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            color: #6366f1;
            font-weight: 600;
            margin-bottom: 8px;
            display: block;
        }

    .form-control, .form-select {
        border: none;
        background: rgba(139, 92, 246, 0.1);
        border-radius: 10px;
        padding: 12px 15px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

        .form-control:focus, .form-select:focus {
            background: rgba(139, 92, 246, 0.15);
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            border: none;
            outline: none;
        }

        .form-control::placeholder {
            color: #9ca3af;
        }

    textarea.form-control {
        min-height: 100px;
        resize: vertical;
    }

    .modal-footer {
        border: none;
        padding: 20px 30px 30px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
        border: none;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(99, 102, 241, 0.3);
        }

    .btn-secondary {
        background: #6c757d;
        border: none;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

    .skills-input-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
    }

    .skill-tag {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        color: white;
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .skill-remove {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 10px;
    }

    .add-skill-input {
        border: 2px dashed #8b5cf6;
        background: rgba(139, 92, 246, 0.05);
        color: #6366f1;
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 12px;
        min-width: 100px;
        outline: none;
    }

        .add-skill-input::placeholder {
            color: #8b5cf6;
        }

    /* Delete Confirmation Modal */
    .delete-modal .modal-header {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    .delete-modal .btn-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        border: none;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .delete-modal .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(239, 68, 68, 0.3);
        }

    .alert-warning {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid rgba(245, 158, 11, 0.3);
        color: #f59e0b;
        border-radius: 10px;
    }

    .action-btn {
        width: 28px;
        height: 28px;
        font-size: 11px;
    }

    .create-job-btn {
        width: 100%;
        justify-content: center;
        margin-bottom: 20px;
    }



    .job-info-section .job-icon {
        width: 60px;
        height: 60px;
        background: rgba(99, 102, 241, 0.1);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .job-info-section h6 {
        color: #6366f1;
        font-weight: 600;
    }

    .input-group-text {
        background: rgba(139, 92, 246, 0.1);
        border: none;
        color: #6366f1;
        font-weight: 600;
    }

    .filter-disabled {
        opacity: 0.6;
        pointer-events: none;
        background-color: #f8f9fa;
    }

    #clearFiltersBtn {
        background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%) !important;
        border: none;
        transition: all 0.3s ease;
    }

        #clearFiltersBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
</style>

<header class="site-header">
    <div class="section-overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-12 text-center">
                <h1 class="text-white">Job Listings</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb justify-content-center">
                        <li class="breadcrumb-item"><a href="/Home">Home</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Job listings</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
</header>

<section class="section-padding pb-0 d-flex justify-content-center align-items-center">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-12">
                <form class="custom-form hero-form" action="#" method="get" role="form">
                    <h3 class="text-white mb-3">Search your dream job</h3>

                    <!-- Selected Keywords Field (NEW) -->
                    <div class="mb-2">
                        <label class="text-white mb-2">Selected keywords</label>
                        <div id="selectedKeywordsContainer" class="skills-input-container" style="display:none;"></div>
                    </div>

                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-12">
                            <div class="input-group">
                                <span class="input-group-text" id="basic-addon1"><i class="bi-cash custom-icon"></i></span>
                                <input type="number" class="form-control" name="minPrice" id="min-price" placeholder="Min" step="1" min="0" />
                                <input type="number" class="form-control" name="maxPrice" id="max-price" placeholder="Max" step="1" min="0" />
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-12">
                            <div class="input-group">
                                <span class="input-group-text" id="basic-addon1"><i class="bi-laptop custom-icon"></i></span>
                                <select class="form-select form-control" name="job-level" id="job-level" aria-label="Default select example">
                                    <option value="" disabled>Category</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-12">
                            <div class="input-group">
                                <span class="input-group-text" id="basic-addon1"><i class="custom-icon bi-code-slash me-1"></i></span>
                                <select class="form-select form-control" name="job-remote" id="job-remote" aria-label="Default select example">
                                    <option value="" disabled>Skills</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-12 col-12">
                            <button type="submit" class="btn btn-primary w-100">
                                Search job
                            </button>
                        </div>
                    </div>
                </form>
                @* added something here *@
                <div class="col-lg-12 col-12 mt-2">
                    <button type="button" id="clearFiltersBtn" class="btn btn-secondary w-100">
                        Clear Filters
                    </button>
                    @* <button type="button" id="clearFiltersBtn" class="form-control bg-secondary text-white"> *@
                    @*     Clear Filters
                    </button> *@
                </div>
            </div>
            <div class="col-lg-6 col-12">
                <img src="images/4557388.png" class="hero-image img-fluid" alt="">
            </div>
        </div>
    </div>
</section>

<section class="job-section section-padding">
    <div class="container">
        <div class="row align-items-center mb-4">
            <div class="col-lg-6 col-12">
                <h3>Results of @totalJobs jobs</h3>
            </div>
            <div class="col-lg-6 col-12 d-flex justify-content-end">
                @if (User.IsInRole("Client"))
                {
                    <button class="create-job-btn" onclick="location.href='@Url.Action("CreateJob", "Job")'">
                        <i class="bi-plus-circle"></i>
                        Create New Job
                    </button>
                }
            </div>
        </div>

        <!-- Sorting buttons -->
        @{
            var currentSort = Context.Request.Query["sortBy"].ToString();
            var isAsc = Context.Request.Query["isAscending"].ToString();
            if (string.IsNullOrEmpty(isAsc)) isAsc = "true";
        }

        <div class="mb-4">
            <a id="date-sort"
               href="@Url.Action("JobListings", new { sortBy = "Date", isAscending = isAsc, page = 1 })"
               class="btn @(currentSort == "Budget" ? "btn-secondary" : "btn-primary") sort-by-btn">
                Sort by Date
            </a>

            <a id="budget-sort"
               href="@Url.Action("JobListings", new { sortBy = "Budget", isAscending = isAsc, page = 1 })"
               class="btn @(currentSort == "Budget" ? "btn-primary" : "btn-secondary") sort-by-btn">
                Sort by Budget
            </a>

        </div>

        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="sortOrderSwitch" checked>
            <label class="form-check-label" for="sortOrderSwitch">Ascending</label>
        </div>
        <br />

        <!-- Job Cards Row -->
        <div class="row">
            @foreach (var job in Model)
            {
                <div class="col-lg-4 col-md-6 col-12 mb-4">
                    <div class="job-thumb job-thumb-box">
                        <div class="job-actions">
                            @if (User.IsInRole("Admin"))
                            {
                                <button class="action-btn edit-btn" onclick="editJob(@job.Id)" title="Edit Job">
                                    <i class="bi-pencil-square"></i>
                                </button>
                                <button class="action-btn delete-btn" onclick="deleteJob(@job.Id)" title="Delete Job">
                                    <i class="bi-trash"></i>
                                </button>
                            }
                        </div>

                        <div class="job-body">
                            <h4 class="job-title">
                                <a href="@Url.Action("JobDetails", "Job", new { id = job.Id })" class="job-title-link">@job.Title</a>
                            </h4>
                            <div class="d-flex align-items-center">
                                <p class="job-location">
                                    <i class="custom-icon bi-code-slash me-1"></i>
                                    @job.skillNames.FirstOrDefault()
                                </p>

                                <p class="job-date">
                                    <i class="custom-icon bi-clock me-1"></i>
                                    @job.DateCreated.ToString("MMM dd, yyyy")
                                </p>
                            </div>
                            <div class="d-flex align-items-center border-top pt-3">
                                <p class="job-price mb-0">
                                    <i class="custom-icon bi-cash me-1"></i>
                                    $@job.Price
                                </p>
                                @if (User.IsInRole("Freelancer"))
                                {
                                    <a asp-controller="Proposal"
                                       asp-action="CreateProposal"
                                       asp-route-id="@job.Id"
                                       class="custom-btn btn ms-auto">
                                        Apply now
                                    </a>
                                }
                                else
                                {
                                    <button class="custom-btn btn ms-auto" onclick="location.href='@Url.Action("JobDetails", "Job", new { id = job.Id })'">View Job</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="row">
            <div class="col-lg-12 col-12">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center mt-5">
                        @*<li class="page-item">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">Prev</span>
                            </a>
                        </li>*@
                        <li class="page-item page-number active" aria-current="page">
                            <a class="page-link" href="#">1</a>
                        </li>
                        <li class="page-item page-number">
                            <a class="page-link" href="#">2</a>
                        </li>
                        <li class="page-item page-number">
                            <a class="page-link" href="#">3</a>
                        </li>
                        <li class="page-item page-number">
                            <a class="page-link" href="#">4</a>
                        </li>
                        <li class="page-item page-number">
                            <a class="page-link" href="#">5</a>
                        </li>
                        @*<li class="page-item">
                            <a class="page-link" href="#" aria-label="Next">

                                <span aria-hidden="true">Next</span>
                            </a>
                        </li>*@
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</section>

<section class="cta-section">
    <div class="section-overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-10">
                <h2 class="text-white mb-2">Over 10k opening jobs</h2>
                <p class="text-white">Gotto Job is a free HTML CSS template for job hunting related websites. This layout is based on the famous Bootstrap 5 CSS framework. Thank you for visiting Tooplate website.</p>
            </div>
            <div class="col-lg-4 col-12 ms-auto">
                <div class="custom-border-btn-wrap d-flex align-items-center mt-lg-4 mt-2">
                    @if (!User.Identity.IsAuthenticated)
                    {
                        <a href="#" class="custom-btn custom-border-btn btn me-4">Create an account</a>
                        <a href="#" class="custom-link">Post a job</a>
                    }
                </div>
            </div>
        </div>
    </div>
</section>


<script>
    // Current active filters
    let activeFilters = {
        price: null,
        categories: null,
        skills: null
    };

    // NEW: store selected keywords from single-select dropdowns
    const selectedCategoryKeywords = [];
    const selectedSkillKeywords = [];

    // Initialize the form and fetch data
    document.addEventListener('DOMContentLoaded', function() {

    document.getElementById('clearFiltersBtn')?.addEventListener('click', clearAllFilters);
        // Load dropdown data
        loadCategoriesInto('#job-level');
        loadSkillsInto('#job-remote');

        // Initialize from URL parameters
        initializeFromUrl();

        // Price range validation
        document.getElementById('min-price').addEventListener('change', validatePriceRange);
        document.getElementById('max-price').addEventListener('change', validatePriceRange);

        // Form submission
            // Replace this existing form submission handler:
    document.querySelector('form.hero-form').addEventListener('submit', function(e) {
        e.preventDefault();

        if (!validatePriceRange()) {
            return;
        }

        const minPrice = document.getElementById('min-price').value;
        const maxPrice = document.getElementById('max-price').value;

        // Use accumulated keywords from the chips
        const categories = selectedCategoryKeywords.slice();
        const skills = selectedSkillKeywords.slice();

        // Clear other filters when one is selected
            if (minPrice || maxPrice) {
        document.getElementById('job-level').selectedIndex = -1;
        document.getElementById('job-remote').selectedIndex = -1;
    } else if (categories.length) {
        document.getElementById('min-price').value = '';
        document.getElementById('max-price').value = '';
        document.getElementById('job-remote').selectedIndex = -1;
    } else if (skills.length) {
        document.getElementById('min-price').value = '';
        document.getElementById('max-price').value = '';
        document.getElementById('job-level').selectedIndex = -1;
    }

        // Submit based on the active filter
        if (categories.length) {

        const url = new URL('@Url.Action("JobListingCategories", "Job")', window.location.origin);
        categories.forEach(c => url.searchParams.append('category', c));
        window.location.href = url.toString();
    }
    else if (skills.length) {
        const url = new URL('@Url.Action("JobListingSkill", "Job")', window.location.origin);
        skills.forEach(s => url.searchParams.append('skill', s));
        window.location.href = url.toString();
    }else if (minPrice || maxPrice) {
            const url = new URL('@Url.Action("JobListingBudget", "Job")', window.location.origin);
            if (minPrice) url.searchParams.set('min', minPrice);
            if (maxPrice) url.searchParams.set('max', maxPrice);
            window.location.href = url.toString();
        }
        else {
            window.location.href = '@Url.Action("JobListings", "Job")';
        }
    });

            const sortSwitch = document.getElementById("sortOrderSwitch");
    const url = new URL(window.location.href);
    const currentOrder = url.searchParams.get("isAscending");
    const page = parseInt(url.searchParams.get("page") || "1", 10);


    // Set initial state
    if (currentOrder === "true") {
        sortSwitch.checked = true;
    } else if (currentOrder === "false") {
        sortSwitch.checked = false;
    }

    // Event listener
    sortSwitch.addEventListener("change", function() {
        const isAscending = this.checked;
        url.searchParams.set("isAscending", isAscending ? "true" : "false");
        url.searchParams.set("page", "1");
        window.location.href = url.toString();
    });
        const minPriceInput = document.getElementById('min-price');
    const maxPriceInput = document.getElementById('max-price');
    const categorySelect = document.getElementById('job-level');
    const skillSelect = document.getElementById('job-remote');

    // Disable other filters when one is selected
    [minPriceInput, maxPriceInput].forEach(input => {
        input.addEventListener('input', function() {
            if (this.value) {
                categorySelect.disabled = true;
                skillSelect.disabled = true;
                categorySelect.parentElement.classList.add('filter-disabled');
                skillSelect.parentElement.classList.add('filter-disabled');
            } else {
                categorySelect.disabled = false;
                skillSelect.disabled = false;
                categorySelect.parentElement.classList.remove('filter-disabled');
                skillSelect.parentElement.classList.remove('filter-disabled');
            }
        });
    });

    // When a category is picked, add it as a keyword chip and reset the select
    categorySelect.addEventListener('change', function() {
        const val = this.value;
        if (val) {
            if (!selectedCategoryKeywords.includes(val)) selectedCategoryKeywords.push(val);
            renderSelectedKeywords();
            // keep existing behavior that disables other filters
            if (this.selectedOptions.length > 0) {
                minPriceInput.disabled = true;
                maxPriceInput.disabled = true;
                skillSelect.disabled = true;
                minPriceInput.parentElement.classList.add('filter-disabled');
                maxPriceInput.parentElement.classList.add('filter-disabled');
                skillSelect.parentElement.classList.add('filter-disabled');
            }
            // reset to placeholder to allow adding more
            this.selectedIndex = 0;
        } else {
            minPriceInput.disabled = false;
            maxPriceInput.disabled = false;
            skillSelect.disabled = false;
            minPriceInput.parentElement.classList.remove('filter-disabled');
            maxPriceInput.parentElement.classList.remove('filter-disabled');
            skillSelect.parentElement.classList.remove('filter-disabled');
        }
    });

    // When a skill is picked, add it as a keyword chip and reset the select
    skillSelect.addEventListener('change', function() {
        const val = this.value;
        if (val) {
            if (!selectedSkillKeywords.includes(val)) selectedSkillKeywords.push(val);
            renderSelectedKeywords();
            // keep existing behavior that disables other filters
            if (this.selectedOptions.length > 0) {
                minPriceInput.disabled = true;
                maxPriceInput.disabled = true;
                categorySelect.disabled = true;
                minPriceInput.parentElement.classList.add('filter-disabled');
                maxPriceInput.parentElement.classList.add('filter-disabled');
                categorySelect.parentElement.classList.add('filter-disabled');
            }
            // reset to placeholder to allow adding more
            this.selectedIndex = 0;
        } else {
            minPriceInput.disabled = false;
            maxPriceInput.disabled = false;
            categorySelect.disabled = false;
            minPriceInput.parentElement.classList.remove('filter-disabled');
            maxPriceInput.parentElement.classList.remove('filter-disabled');
            categorySelect.parentElement.classList.remove('filter-disabled');
        }
    });

    // Handle removing chips (event delegation)
    document.getElementById('selectedKeywordsContainer').addEventListener('click', function(e) {
        const btn = e.target.closest('.skill-remove');
        if (!btn) return;
        const chip = btn.closest('[data-type]');
        if (!chip) return;
        const type = chip.getAttribute('data-type');
        const value = chip.getAttribute('data-value');
        if (type === 'category') {
            const idx = selectedCategoryKeywords.indexOf(value);
            if (idx > -1) selectedCategoryKeywords.splice(idx, 1);
        } else if (type === 'skill') {
            const idx = selectedSkillKeywords.indexOf(value);
            if (idx > -1) selectedSkillKeywords.splice(idx, 1);
        }
        renderSelectedKeywords();
        // re-enable other inputs if no chips remain
        if (selectedCategoryKeywords.length === 0 && selectedSkillKeywords.length === 0) {
            minPriceInput.disabled = false;
            maxPriceInput.disabled = false;
            categorySelect.disabled = false;
            skillSelect.disabled = false;
            minPriceInput.parentElement.classList.remove('filter-disabled');
            maxPriceInput.parentElement.classList.remove('filter-disabled');
            categorySelect.parentElement.classList.remove('filter-disabled');
            skillSelect.parentElement.classList.remove('filter-disabled');
        }
    });

               const pages = document.querySelectorAll('li.page-number');

    pages.forEach((pageItem, index) => {
        pageItem.classList.remove("active");
        if (page == (index + 1)) {
            pageItem.classList.add("active");
        }
        pageItem.addEventListener('click', function(e) {
            e.preventDefault();
            const currentActive = document.querySelector('.page-number.active');
            if (currentActive) currentActive.classList.remove('active');
            this.classList.add('active');
            const url = new URL(window.location);
                const pageNumber = parseInt(this.textContent.trim(), 10);
    url.searchParams.set("page", pageNumber.toString());

            window.location.href = url.toString();
        });
    });
    });

    // Helper functions
    function validatePriceRange() {
        const minPrice = document.getElementById('min-price').value;
        const maxPrice = document.getElementById('max-price').value;

        if (minPrice && maxPrice && parseInt(minPrice) > parseInt(maxPrice)) {
            alert('Minimum price cannot be greater than maximum price');
            return false;
        }
        return true;
    }

    function initializeFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);

        // Price range
        if (urlParams.has('min') || urlParams.has('max')) {
            document.getElementById('min-price').value = urlParams.get('min') || '';
            document.getElementById('max-price').value = urlParams.get('max') || '';
            activeFilters.price = {
                min: urlParams.get('min'),
                max: urlParams.get('max')
            };
        }
        // Category
            else if (urlParams.has('category')) {
        const cats = urlParams.getAll('category');
        // accumulate chips instead of multi-select
        cats.forEach(c => { if (!selectedCategoryKeywords.includes(c)) selectedCategoryKeywords.push(c); });
        activeFilters.categories = cats;
        // reflect chips
        renderSelectedKeywords();
        // disable other inputs to match previous behavior
        if (cats.length > 0) {
            document.getElementById('min-price').disabled = true;
            document.getElementById('max-price').disabled = true;
            document.getElementById('job-remote').disabled = true;
            document.getElementById('min-price').parentElement.classList.add('filter-disabled');
            document.getElementById('max-price').parentElement.classList.add('filter-disabled');
            document.getElementById('job-remote').parentElement.classList.add('filter-disabled');
        }
    }
    // Skill
    else if (urlParams.has('skill')) {
        const sks = urlParams.getAll('skill');
        sks.forEach(s => { if (!selectedSkillKeywords.includes(s)) selectedSkillKeywords.push(s); });
        const select = document.getElementById('job-remote');
        activeFilters.skills = sks;
        renderSelectedKeywords();
        if (sks.length > 0) {
            document.getElementById('min-price').disabled = true;
            document.getElementById('max-price').disabled = true;
            document.getElementById('job-level').disabled = true;
            document.getElementById('min-price').parentElement.classList.add('filter-disabled');
            document.getElementById('max-price').parentElement.classList.add('filter-disabled');
            document.getElementById('job-level').parentElement.classList.add('filter-disabled');
        }
    }
    }

    function getCurrentFilterParams() {
        const currentUrl = new URL(window.location.href);
        const filterType = currentUrl.pathname.split('/').pop();
        const params = new URLSearchParams();

        if (filterType === 'JobListingBudget') {
            if (currentUrl.searchParams.has('min')) params.set('min', currentUrl.searchParams.get('min'));
            if (currentUrl.searchParams.has('max')) params.set('max', currentUrl.searchParams.get('max'));
        }
        else if (filterType === 'JobListingCategories') {
            if (currentUrl.searchParams.has('category')) params.set('category', currentUrl.searchParams.get('category'));
        }
        else if (filterType === 'JobListingSkill') {
            if (currentUrl.searchParams.has('skill')) params.set('skill', currentUrl.searchParams.get('skill'));
        }

        return params;
    }

    async function loadCategoriesInto(selectQuery) {
        try {
            const res = await fetch('https://localhost:7029/api/Job/all-categories');
            const json = await res.json();
            if (!json?.isSuccess || !Array.isArray(json.data)) return;

            const select = document.querySelector(selectQuery);
            if (!select) return;

            // Remember current selection
            const current = (select.value || '').trim();

            // Rebuild options
            select.innerHTML = '<option value="" disabled>Category</option>';

            json.data.forEach(c => {
                const opt = document.createElement('option');
                opt.value = c.name;
                opt.textContent = c.name;
                select.appendChild(opt);
            });

            if (current) {
                select.value = current;
                if (select.value !== current) select.selectedIndex = 0;
            }
        } catch (e) {
            console.error('Error loading categories:', e);
        }
    }

    async function loadSkillsInto(selectQuery) {
        try {
            const res = await fetch('https://localhost:7029/api/Skill/get-all');
            const json = await res.json();
            if (!json?.isSuccess || !Array.isArray(json.data)) return;

            const select = document.querySelector(selectQuery);
            if (!select) return;

            const current = (select.value || '').trim();

            select.innerHTML = '<option value="" disabled>Skills</option>';

            json.data.forEach(s => {
                const opt = document.createElement('option');
                opt.value = s.name;
                opt.textContent = s.name;
                select.appendChild(opt);
            });

            if (current) {
                select.value = current;
                if (select.value !== current) select.selectedIndex = 0;
            }
        } catch (e) {
            console.error('Error loading skills:', e);
        }
    }

                function clearAllFilters() {
        // Clear input values
        document.getElementById('min-price').value = '';
        document.getElementById('max-price').value = '';
            document.getElementById('job-level').selectedIndex = -1;
    document.getElementById('job-remote').selectedIndex = -1;

        // Clear selected keywords (chips)
        selectedCategoryKeywords.length = 0;
        selectedSkillKeywords.length = 0;
        renderSelectedKeywords();

        // Enable all inputs
        document.getElementById('min-price').disabled = false;
        document.getElementById('max-price').disabled = false;
        document.getElementById('job-level').disabled = false;
        document.getElementById('job-remote').disabled = false;

        // Remove disabled styling
        document.querySelectorAll('.input-group').forEach(group => {
            group.classList.remove('filter-disabled');
        });

        // Remove this line to prevent page refresh:
        // window.location.href = '@Url.Action("JobListings", "Job")';

        // Clear any active filters from the URL without refreshing
        if (window.history.pushState) {
            const url = new URL(window.location.href);
            url.searchParams.delete('min');
            url.searchParams.delete('max');
            url.searchParams.delete('category');
            url.searchParams.delete('skill');
            window.history.pushState({}, '', url);
        }
    }

    // Renders the combined keywords chips
    function renderSelectedKeywords() {
        const box = document.getElementById('selectedKeywordsContainer');
        const parts = [];
        selectedCategoryKeywords.forEach(v => {
            parts.push(`<span class="skill-tag" data-type="category" data-value="${encodeHTML(v)}">
                ${escapeHTML(v)}
                <button type="button" class="skill-remove" aria-label="Remove ${escapeHTML(v)}">×</button>
            </span>`);
        });
        selectedSkillKeywords.forEach(v => {
            parts.push(`<span class="skill-tag" data-type="skill" data-value="${encodeHTML(v)}">
                ${escapeHTML(v)}
                <button type="button" class="skill-remove" aria-label="Remove ${escapeHTML(v)}">×</button>
            </span>`);
        });
        if (parts.length === 0) {
            box.style.display = 'none';
            box.innerHTML = '';
        } else {
            box.style.display = 'flex';
            box.innerHTML = parts.join('');
        }
    }

    // simple escaping helpers
    function escapeHTML(str) { return (str || '').replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[s])); }
    function encodeHTML(str) { return escapeHTML(str); }

    // Add event listener for the clear button (already bound safely above)
    // document.getElementById('clearFiltersBtn').addEventListener('click', clearAllFilters);
</script>
