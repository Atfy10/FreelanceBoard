@using FreelanceBoard.MVC.Extensions
@model JobCreateViewModel

<style>
    .job-section {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        padding: 80px 0;
    }

    .job-form-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 50px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        width: 100%;
        margin: 0 auto;
    }

    .job-form-header {
        text-align: center;
        margin-bottom: 40px;
    }

        .job-form-header .logo-container {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
        }

            .job-form-header .logo-container i {
                font-size: 2rem;
                color: white;
            }

        .job-form-header h2 {
            color: #6366f1;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .job-form-header p {
            color: #6c757d;
            margin-bottom: 0;
        }

    .form-group {
        margin-bottom: 25px;
    }

        .form-group label {
            color: #6366f1;
            font-weight: 600;
            margin-bottom: 8px;
            display: block;
        }

    .input-group {
        position: relative;
    }

        .input-group .form-control {
            padding-left: 50px;
            height: 55px;
            border: none;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

            .input-group .form-control:focus {
                background: rgba(255, 255, 255, 1);
                box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);
                outline: none;
            }

    .input-group-text {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6c757d;
        z-index: 10;
        font-size: 1.2rem;
    }

    .form-select {
        padding-left: 50px;
        height: 55px;
        border: none;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 10px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .form-select:focus {
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);
            outline: none;
        }

    textarea.form-control {
        min-height: 150px;
        resize: vertical;
        padding: 15px !important;
        border: none;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 10px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        textarea.form-control:focus {
            background: rgba(255, 255, 255, 1);
            box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);
            outline: none;
        }

    .job-btn {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 10px;
        font-weight: 600;
        font-size: 16px;
        width: 100%;
        transition: all 0.3s ease;
        margin-top: 10px;
    }

        .job-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(99, 102, 241, 0.3);
            color: white;
        }

    .skills-input-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 10px;
    }

    .skill-tag {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 13px;
        display: inline-flex;
        align-items: center;
    }

    .skill-remove {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        margin-left: 6px;
        font-size: 10px;
    }

    .add-skill-input {
        border: 2px dashed #8b5cf6;
        background: rgba(139, 92, 246, 0.05);
        color: #6366f1;
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 12px;
        min-width: 100px;
        outline: none;
    }

        .add-skill-input::placeholder {
            color: #8b5cf6;
        }

    .date-input .input-group-text {
        z-index: 11;
    }

    .date-input .form-control {
        padding-left: 50px;
    }
</style>


<section class="job-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-md-12 col-12">
                <div class="job-form-container">
                    <div class="job-form-header">
                        <div class="logo-container">
                            <i class="bi-briefcase-fill"></i>
                        </div>
                        <h2>Create New Job</h2>
                        <p>Post your opportunity and find the perfect candidate</p>
                    </div>

                    <form id="jobForm">
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-8">
                                <div class="form-group">
                                    <label for="Title">Job Title *</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi-card-heading"></i></span>
                                        <input type="text" id="Title" name="Title" class="form-control" placeholder="Enter job title" required>
                                    </div>
                                    <span class="text-danger" id="titleError"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="Category">Category *</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi-tag"></i></span>
                                        <select id="Category" name="Category" class="form-select" required>
                                            <option value="">Loading categories...</option>
                                        </select>
                                    </div>
                                    <span class="text-danger" id="categoryError"></span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="Description">Job Description *</label>
                            <textarea id="Description" name="Description" class="form-control" rows="6" placeholder="Describe the job requirements" required></textarea>
                            <span class="text-danger" id="descriptionError"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Price">Budget *</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi-cash"></i></span>
                                        <input type="number" id="Price" name="Price" class="form-control" placeholder="Enter amount" step="0.01" min="0" required>
                                    </div>
                                    <span class="text-danger" id="priceError"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Deadline">Application Deadline *</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi-calendar"></i></span>
                                        <input type="date" id="Deadline" name="Deadline" class="form-control" required>
                                    </div>
                                    <span class="text-danger" id="deadlineError"></span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Required Skills</label>
                            <div class="input-group mb-3">
                                <span class="input-group-text"><i class="bi-tools"></i></span>
                                <select class="form-select" id="skillsDropdown">
                                    <option value="">Select skills...</option>
                                </select>
                                <button class="btn btn-outline-secondary" type="button" id="addSkillBtn">
                                    <i class="bi-plus"></i> Add
                                </button>
                            </div>
                            <div class="skills-input-container" id="skillsContainer"></div>
                            <input type="hidden" id="skillNamesInput" name="SkillNames" value="">
                        </div>

                        <button type="submit" class="job-btn">
                            <i class="bi-check-circle-fill me-2"></i>
                            Post Job
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    // Global variables
    let allSkills = [];
    let selectedSkills = [];
    let allCategories = [];

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        fetchCategories();
        fetchSkills();
        setupDatePicker();
        setupFormSubmit();
    });

    // Fetch categories from API
    async function fetchCategories() {
        try {
            const response = await fetch('https://localhost:7029/api/Job/all-categories');
            const data = await response.json();

            if (data.isSuccess) {
                allCategories = data.data;
                populateCategoryDropdown();
            }
        } catch (error) {
            console.error('Error fetching categories:', error);
            document.getElementById('Category').innerHTML = '<option value="">Error loading categories</option>';
        }
    }

    // Fetch skills from API
    async function fetchSkills() {
        try {
            const response = await fetch('https://localhost:7029/api/Skill/get-all');
            const data = await response.json();

            if (data.isSuccess) {
                allSkills = data.data;
                populateSkillsDropdown();
            }
        } catch (error) {
            console.error('Error fetching skills:', error);
            document.getElementById('skillsDropdown').innerHTML = '<option value="">Error loading skills</option>';
        }
    }

    // Set minimum date to tomorrow
    function setupDatePicker() {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        document.getElementById('Deadline').min = tomorrow.toISOString().split('T')[0];
        document.getElementById('Deadline').value = tomorrow.toISOString().split('T')[0];
    }

    // Populate category dropdown
    function populateCategoryDropdown() {
        const select = document.getElementById('Category');
        select.innerHTML = '<option value="">Select Category</option>';

        allCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.name;
            option.textContent = category.name;
            select.appendChild(option);
        });
    }

    // Populate skills dropdown
    function populateSkillsDropdown() {
        const select = document.getElementById('skillsDropdown');
        select.innerHTML = '<option value="">Select skill</option>';

        const availableSkills = allSkills.filter(skill =>
            !selectedSkills.includes(skill.name)
        );

        availableSkills.forEach(skill => {
            const option = document.createElement('option');
            option.value = skill.id;
            option.textContent = skill.name;
            option.setAttribute('data-name', skill.name);
            select.appendChild(option);
        });
    }

    // Add skill to selected list
    function addSkill(skillName) {
        if (!selectedSkills.includes(skillName)) {
            selectedSkills.push(skillName);
            renderSkills();
            populateSkillsDropdown();
            updateSkillsInput();
        }
    }

    // Remove skill from selected list
    function removeSkill(skillName) {
        selectedSkills = selectedSkills.filter(skill => skill !== skillName);
        renderSkills();
        populateSkillsDropdown();
        updateSkillsInput();
    }

    // Render selected skills
    function renderSkills() {
        const container = document.getElementById('skillsContainer');
        container.innerHTML = '';

        selectedSkills.forEach(skill => {
            const skillTag = document.createElement('div');
            skillTag.className = 'skill-tag';
            skillTag.innerHTML = `
                ${skill}
                <button type="button" class="skill-remove" onclick="removeSkill('${skill}')">×</button>
            `;
            container.appendChild(skillTag);
        });
    }

    // Update hidden input with selected skills
    function updateSkillsInput() {
        document.getElementById('skillNamesInput').value = selectedSkills.join(',');
    }

    // Setup form submission
    function setupFormSubmit() {
        const form = document.getElementById('jobForm');
        const addSkillBtn = document.getElementById('addSkillBtn');

        // Add skill button handler
        addSkillBtn.addEventListener('click', function() {
            const select = document.getElementById('skillsDropdown');
            const selectedOption = select.options[select.selectedIndex];

            if (selectedOption.value) {
                const skillName = selectedOption.getAttribute('data-name');
                addSkill(skillName);
            }
        });

        // Form submit handler
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate form
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            try {
                // Get form data
                const formData = {
                    title: document.getElementById('Title').value,
                    description: document.getElementById('Description').value,
                    category: document.getElementById('Category').value,
                    price: parseFloat(document.getElementById('Price').value),
                    userId: '@User.GetUserId()',
                    deadline: document.getElementById('Deadline').value,
                    skillNames: selectedSkills
                };


                // Show loading state
                const submitBtn = document.querySelector('.job-btn');
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="bi bi-arrow-repeat"></i> Creating Job...';

                // Submit to server
                const response = await fetch('/Job/CreateJob', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

               if (response.ok && result.success) {
            alert(result.message);
            window.location.href = '/Job/ClientDashboard'; // redirect after success
        } else {
            alert(result.message || 'Failed to create job');
        }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while creating the job');
            } finally {
                const submitBtn = document.querySelector('.job-btn');
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="bi-check-circle-fill me-2"></i> Post Job';
            }
        });
    }
</script>