@model UserProfileViewModel

        <style>
            .profile-section {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
                min-height: 100vh;
                padding: 80px 0;
            }

            .profile-container {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                margin-bottom: 30px;
            }

            .profile-header {
                text-align: center;
                margin-bottom: 40px;
                position: relative;
            }

            .profile-picture-container {
    position: relative;
    display: inline-block;
    margin-bottom: 20px;
}

.profile-picture {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid white;
    box-shadow: 0 8px 32px rgba(99, 102, 241, 0.3);
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
    transition: all 0.3s ease;
}

.profile-picture:hover {
    transform: scale(1.05);
    box-shadow: 0 12px 40px rgba(99, 102, 241, 0.4);
}

.profile-picture-upload {
    position: absolute;
    bottom: 5px;
    right: 5px;
    width: 45px;
    height: 45px;
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border: 3px solid white;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
}

.profile-picture-upload:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.5);
    background: linear-gradient(135deg, #8b5cf6 0%, #a855f7 100%);
}

.profile-picture-upload i {
    color: white;
    font-size: 1.2rem;
    transition: all 0.3s ease;
}

.profile-picture-upload:hover i {
    transform: scale(1.1);
}

            .profile-username {
                color: #6366f1;
                font-weight: 700;
                font-size: 2rem;
                margin-bottom: 10px;
            }

            .profile-role {
                color: #6c757d;
                font-size: 1.1rem;
                margin-bottom: 0;
            }

            .section-title {
                color: #6366f1;
                font-weight: 700;
                font-size: 1.5rem;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .section-title i {
                font-size: 1.3rem;
            }

            .form-group {
                margin-bottom: 25px;
            }

            .form-group label {
                color: #6366f1;
                font-weight: 600;
                margin-bottom: 8px;
                display: block;
            }

            .input-group {
                position: relative;
            }

            .input-group .form-control,
            .input-group .form-control:focus {
                padding-left: 50px;
                height: 55px;
                border: none;
                background: rgba(255, 255, 255, 0.8);
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .input-group .form-control:focus {
                background: rgba(255, 255, 255, 1);
                box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);
                outline: none;
            }

            .input-group-text {
                position: absolute;
                left: 15px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: #6c757d;
                z-index: 10;
                font-size: 1.2rem;
            }

            .bio-textarea {
                min-height: 120px;
                resize: vertical;
                padding: 15px 15px 15px 50px;
            }

            .skills-container {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                margin-top: 10px;
            }

            .skill-tag {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                color: white;
                padding: 8px 15px;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: 500;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
            }

            .skill-tag:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(139, 92, 246, 0.3);
            }

            .skill-remove {
                background: rgba(255, 255, 255, 0.2);
                border: none;
                color: white;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 0.8rem;
            }

            .add-skill-btn {
                background: rgba(139, 92, 246, 0.1);
                border: 2px dashed #8b5cf6;
                color: #6366f1;
                padding: 8px 15px;
                border-radius: 20px;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .add-skill-btn:hover {
                background: rgba(139, 92, 246, 0.2);
                border-color: #6366f1;
            }

            .projects-container {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }

            .project-card {
                background: rgba(255, 255, 255, 0.8);
                border-radius: 15px;
                padding: 20px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
                border: none;
            }

            .project-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(139, 92, 246, 0.2);
            }

            .project-title {
                color: #6366f1;
                font-weight: 600;
                font-size: 1.1rem;
                margin-bottom: 10px;
            }

            .project-description {
                color: #6c757d;
                font-size: 0.9rem;
                margin-bottom: 15px;
            }

            .project-attachment {
                display: flex;
                align-items: center;
                gap: 10px;
                padding: 10px;
                background: rgba(139, 92, 246, 0.1);
                border-radius: 8px;
                margin-bottom: 10px;
                transition: all 0.3s ease;
            }

            .project-attachment:hover {
                background: rgba(139, 92, 246, 0.2);
            }

            .project-attachment i {
                color: #6366f1;
                font-size: 1.2rem;
            }

            .project-attachment span {
                color: #6366f1;
                font-weight: 500;
                flex: 1;
            }

            .add-project-btn {
                background: rgba(139, 92, 246, 0.1);
                border: 2px dashed #8b5cf6;
                color: #6366f1;
                padding: 40px 20px;
                border-radius: 15px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }

            .add-project-btn:hover {
                background: rgba(139, 92, 246, 0.2);
                border-color: #6366f1;
            }

            .add-project-btn i {
                font-size: 2rem;
                margin-bottom: 10px;
            }

            .save-btn {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
                border: none;
                color: white;
                padding: 15px 40px;
                border-radius: 10px;
                font-weight: 600;
                font-size: 16px;
                transition: all 0.3s ease;
                margin-top: 30px;
            }

            .save-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(99, 102, 241, 0.3);
                color: white;
            }

            .edit-mode-toggle {
                position: absolute;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                border: none;
                color: white;
                padding: 10px 20px;
                border-radius: 25px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .edit-mode-toggle:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(139, 92, 246, 0.3);
            }

            .readonly-field {
                background: rgba(255, 255, 255, 0.5) !important;
                cursor: not-allowed;
            }

            .change-password-link {
    position: absolute;
    top: 20px;
    right: 180px;
    background: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%);
    border: none;
    color: white;
    padding: 10px 20px;
    border-radius: 25px;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 14px;
}

.change-password-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(245, 158, 11, 0.3);
    color: white;
    text-decoration: none;
}
        </style>

<section class="profile-section">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-12">
                <!-- Profile Header -->
                <div class="profile-container">
                    <button class="edit-mode-toggle" onclick="toggleEditMode()">
                        <i class="bi-pencil-square me-2"></i>
                        <span id="edit-btn-text">Edit Profile</span>
                    </button>
                    <a href="/User/ChangePassword" class="change-password-link">
                        <i class="bi-shield-lock-fill me-2"></i>
                        Change Password
                    </a>

                    <div class="profile-header">
                        <div class="profile-picture-container">
                            <img src="@(string.IsNullOrEmpty(Model.Profile?.Image) ? "/placeholder.svg?height=150&width=150&text=Profile" : "/images/" + Model.Profile.Image)" alt="Profile Picture" class="profile-picture" id="profilePicture">
                            <div class="profile-picture-upload" onclick="document.getElementById('profilePictureInput').click()">
                                <i class="bi-camera-fill"></i>
                            </div>
                            <input type="file" id="profilePictureInput" accept="image/*" style="display: none;" onchange="handleProfilePictureChange(event)">
                        </div>
                        <h2 class="profile-username" id="displayUsername">@Model.UserName</h2>
                        <p class="profile-role">Full Stack Developer</p> <!-- Optional: Add dynamic role -->
                    </div>

                    <!-- Basic Information -->
                    <div class="row">
                        <div class="col-lg-6 col-12">
                            <div class="form-group">
                                <label for="username">Username</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi-person-badge"></i></span>
                                    <input type="text" id="username" class="form-control readonly-field" value="@Model.UserName" readonly>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6 col-12">
                            <div class="form-group">
                                <label for="phoneNumber">Phone Number</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi-telephone"></i></span>
                                    <input type="tel" id="phoneNumber" class="form-control readonly-field" value="@Model.PhoneNumber" readonly>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Bio Section -->
                    <div class="form-group">
                        <label for="bio">Bio</label>
                        <div class="input-group">
                            <span class="input-group-text" style="top: 20px;"><i class="bi-person-lines-fill"></i></span>
                            <textarea id="bio" class="form-control bio-textarea readonly-field" readonly placeholder="Tell us about yourself...">@Model.Profile?.Bio</textarea>
                        </div>
                    </div>
                </div>

                <!-- Skills Section -->
                <div class="profile-container">
                    <h3 class="section-title">
                        <i class="bi-gear-fill"></i>
                        Skills
                    </h3>
                    <div class="skills-container" id="skillsContainer">
                        @foreach (var skill in Model.Skills ?? new List<SkillViewModel>())
                        {
                            <div class="skill-tag">
                                @skill.Name
                                <button class="skill-remove" onclick="removeSkill(this)" style="display: none;">×</button>
                            </div>
                        }
                        <div class="add-skill-btn" onclick="addSkill()" style="display: none;">
                            <i class="bi-plus-circle me-2"></i>
                            Add Skill
                        </div>
                    </div>
                </div>

                <!-- Projects Section -->
                <div class="profile-container">
                    <h3 class="section-title">
                        <i class="bi-folder-fill"></i>
                        Projects
                    </h3>
                    <div class="projects-container" id="projectsContainer">
                        @foreach (var project in Model.Projects ?? new List<ProjectViewModel>())
                        {
                            <div class="project-card">
                                <h4 class="project-title">@project.Title</h4>
                                <p class="project-description">@project.Description</p>
                                @if (!string.IsNullOrEmpty(project.Attachments))
                                {
                                    var attachments = project.Attachments.Split(','); // If comma-separated
                                    foreach (var attachment in attachments)
                                    {
                                        var trimmed = attachment.Trim();
                                        var isLink = trimmed.StartsWith("http");
                                        var icon = isLink ? "bi-box-arrow-up-right" :
                                        trimmed.EndsWith(".pdf") ? "bi-file-earmark-pdf" :
                                        "bi-file-earmark-code";

                                        <div class="project-attachment">
                                            <i class="@icon"></i>
                                            <span>@trimmed</span>
                                            <button class="btn btn-sm" onclick="@(isLink ? $"openLink('{trimmed}')" : $"downloadAttachment('{trimmed}')")">
                                                <i class="@icon"></i>
                                            </button>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        <div class="add-project-btn" onclick="addProject()" style="display: none;">
                            <i class="bi-plus-circle"></i>
                            <span>Add New Project</span>
                        </div>
                    </div>
                </div>

                <!-- Save Button -->
                <div class="text-center">
                    <button class="save-btn" id="saveBtn" onclick="saveProfile()" style="display: none;">
                        <i class="bi-check-circle me-2"></i>
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>

        <script>
            let isEditMode = false;

            function toggleEditMode() {
    isEditMode = !isEditMode;
    const editBtn = document.getElementById('edit-btn-text');
    const saveBtn = document.getElementById('saveBtn');
    const readonlyFields = document.querySelectorAll('.readonly-field');
    const skillRemoveBtns = document.querySelectorAll('.skill-remove');
    const addSkillBtn = document.querySelector('.add-skill-btn');
    const addProjectBtn = document.querySelector('.add-project-btn');

    if (isEditMode) {
        editBtn.textContent = 'Cancel Edit';
        saveBtn.style.display = 'inline-block';
        addSkillBtn.style.display = 'flex';
        addProjectBtn.style.display = 'flex';
        
        readonlyFields.forEach(field => {
            if (field.id !== 'username') { // Keep username readonly
                field.removeAttribute('readonly');
                field.classList.remove('readonly-field');
            }
        });

        skillRemoveBtns.forEach(btn => {
            btn.style.display = 'flex';
        });
    } else {
        editBtn.textContent = 'Edit Profile';
        saveBtn.style.display = 'none';
        addSkillBtn.style.display = 'none';
        addProjectBtn.style.display = 'none';
        
        readonlyFields.forEach(field => {
            field.setAttribute('readonly', true);
            field.classList.add('readonly-field');
        });

        skillRemoveBtns.forEach(btn => {
            btn.style.display = 'none';
        });
    }
}

            function handleProfilePictureChange(event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        document.getElementById('profilePicture').src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            }

            function addSkill() {
                const skillName = prompt('Enter skill name:');
                if (skillName && skillName.trim()) {
                    const skillsContainer = document.getElementById('skillsContainer');
                    const addBtn = skillsContainer.querySelector('.add-skill-btn');
                    
                    const skillTag = document.createElement('div');
                    skillTag.className = 'skill-tag';
                    skillTag.innerHTML = `
                        ${skillName.trim()}
                        <button class="skill-remove" onclick="removeSkill(this)">×</button>
                    `;
                    
                    skillsContainer.insertBefore(skillTag, addBtn);
                }
            }

            function removeSkill(button) {
                button.parentElement.remove();
            }

            function addProject() {
                const projectTitle = prompt('Enter project title:');
                if (projectTitle && projectTitle.trim()) {
                    const projectDescription = prompt('Enter project description:');
                    if (projectDescription && projectDescription.trim()) {
                        const projectsContainer = document.getElementById('projectsContainer');
                        const addBtn = projectsContainer.querySelector('.add-project-btn');
                        
                        const projectCard = document.createElement('div');
                        projectCard.className = 'project-card';
                        projectCard.innerHTML = `
                            <h4 class="project-title">${projectTitle.trim()}</h4>
                            <p class="project-description">${projectDescription.trim()}</p>
                            <div class="project-attachment">
                                <i class="bi-file-earmark"></i>
                                <span>No attachments yet</span>
                                <button class="btn btn-sm" onclick="addAttachment(this)">
                                    <i class="bi-plus"></i>
                                </button>
                            </div>
                        `;
                        
                        projectsContainer.insertBefore(projectCard, addBtn);
                    }
                }
            }

            function downloadAttachment(filename) {
                alert(`Downloading ${filename}...`);
                // Implement actual download logic here
            }

            function openLink(url) {
                window.open(url, '_blank');
            }

            function addAttachment(button) {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '*/*';
                input.onchange = function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        const attachment = button.parentElement;
                        attachment.innerHTML = `
                            <i class="bi-file-earmark"></i>
                            <span>${file.name}</span>
                            <button class="btn btn-sm" onclick="downloadAttachment('${file.name}')">
                                <i class="bi-download"></i>
                            </button>
                        `;
                    }
                };
                input.click();
            }

            function saveProfile() {
                // Collect all form data
                const profileData = {
                    username: document.getElementById('username').value,
                    phoneNumber: document.getElementById('phoneNumber').value,
                    bio: document.getElementById('bio').value,
                    skills: Array.from(document.querySelectorAll('.skill-tag')).map(tag => 
                        tag.textContent.replace('×', '').trim()
                    ).filter(skill => skill !== 'Add Skill')
                };

                console.log('Saving profile:', profileData);
                alert('Profile saved successfully!');
                
                // Exit edit mode
                toggleEditMode();
            }
</script>