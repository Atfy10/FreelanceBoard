@model JobProposalsViewModel
@{
    var daysAgo = (DateTime.Now - Model.JobDateCreated).Days;
}
<style>
            .proposals-section {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%);
                min-height: 100vh;
                padding: 80px 0;
            }

            .proposals-container {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                margin-bottom: 30px;
            }

            .job-info-header {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                color: white;
                padding: 30px;
                border-radius: 15px;
                margin-bottom: 30px;
            }

            .job-info-title {
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 10px;
            }

            .job-info-meta {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                align-items: center;
                opacity: 0.9;
            }

            .job-info-meta-item {
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .back-btn {
                background: rgba(255, 255, 255, 0.2);
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 25px;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
                margin-bottom: 20px;
            }

            .back-btn:hover {
                background: rgba(255, 255, 255, 0.3);
                color: white;
                text-decoration: none;
            }

            .proposals-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 30px;
                flex-wrap: wrap;
                gap: 20px;
            }

            .proposals-title {
                color: #6366f1;
                font-weight: 700;
                font-size: 1.8rem;
                margin: 0;
            }

            .proposals-count {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                color: white;
                padding: 8px 16px;
                border-radius: 20px;
                font-weight: 600;
            }

            .sort-dropdown {
                min-width: 200px;
            }

            .proposal-card {
                background: rgba(255, 255, 255, 0.8);
                border-radius: 15px;
                padding: 25px;
                margin-bottom: 20px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
                border: none;
            }

            .proposal-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 10px 25px rgba(139, 92, 246, 0.2);
            }

            .proposal-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                margin-bottom: 20px;
                flex-wrap: wrap;
                gap: 15px;
            }

            .freelancer-info {
                display: flex;
                align-items: center;
                gap: 15px;
                flex: 1;
            }

            .freelancer-avatar {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                object-fit: cover;
                border: 3px solid white;
                box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
            }

            .freelancer-details h4 {
                color: #6366f1;
                font-weight: 700;
                margin-bottom: 5px;
                font-size: 1.2rem;
            }

            .freelancer-rating {
                display: flex;
                align-items: center;
                gap: 5px;
                margin-bottom: 5px;
            }

            .stars {
                color: #fbbf24;
            }

            .freelancer-location {
                color: #6c757d;
                font-size: 0.9rem;
            }

            .proposal-price {
                text-align: right;
            }

            .price-amount {
                color: #10b981;
                font-weight: 700;
                font-size: 1.4rem;
                margin-bottom: 5px;
            }

            .delivery-time {
                color: #6c757d;
                font-size: 0.9rem;
            }

            .proposal-message {
                background: rgba(139, 92, 246, 0.05);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
                border-left: 4px solid #6366f1;
            }

            .proposal-message h5 {
                color: #6366f1;
                font-weight: 600;
                margin-bottom: 10px;
            }

            .proposal-message p {
                color: #4b5563;
                line-height: 1.6;
                margin: 0;
            }

            .proposal-meta {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                margin-bottom: 20px;
                align-items: center;
            }

            .meta-item {
                display: flex;
                align-items: center;
                gap: 8px;
                color: #6c757d;
                font-size: 0.9rem;
            }

            .meta-item i {
                color: #6366f1;
            }

            .proposal-actions {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }

            .action-btn {
                padding: 10px 20px;
                border-radius: 25px;
                border: none;
                font-size: 0.9rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                gap: 8px;
            }

            .btn-accept {
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                color: white;
            }

            .btn-accept:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
                color: white;
            }

            .btn-reject {
                background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
                color: white;
            }

            .btn-reject:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(239, 68, 68, 0.3);
                color: white;
            }

            .btn-message {
                background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
                color: white;
            }

            .btn-message:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(99, 102, 241, 0.3);
                color: white;
            }

            .btn-view-profile {
                background: transparent;
                color: #6366f1;
                border: 2px solid #6366f1;
            }

            .btn-view-profile:hover {
                background: #6366f1;
                color: white;
            }

            .proposal-status {
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 600;
                text-transform: uppercase;
            }

            .status-pending {
                background: rgba(245, 158, 11, 0.1);
                color: #f59e0b;
            }

            .status-accepted {
                background: rgba(16, 185, 129, 0.1);
                color: #10b981;
            }

            .status-rejected {
                background: rgba(239, 68, 68, 0.1);
                color: #ef4444;
            }

            .portfolio-links {
                margin-top: 15px;
            }

            .portfolio-links h6 {
                color: #6366f1;
                font-weight: 600;
                margin-bottom: 10px;
            }

            .portfolio-link {
                display: inline-flex;
                align-items: center;
                gap: 5px;
                color: #6366f1;
                text-decoration: none;
                margin-right: 15px;
                font-size: 0.9rem;
            }

            .portfolio-link:hover {
                text-decoration: underline;
                color: #8b5cf6;
            }

            .empty-state {
                text-align: center;
                padding: 60px 20px;
                color: #6c757d;
            }

            .empty-state i {
                font-size: 4rem;
                color: #d1d5db;
                margin-bottom: 20px;
            }

            .empty-state h4 {
                color: #6366f1;
                margin-bottom: 15px;
            }
        </style>

<section class="proposals-section">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-lg-12 col-12">
                             <!-- Job Information Header  -->
                            <div class="proposals-container">
                                <a href="client-dashboard.html" class="back-btn">
                                    <i class="bi-arrow-left"></i>
                                    Back to My Jobs
                                </a>

                                <div class="job-info-header">
                                    <h1 class="job-info-title" id="jobTitle">@Model.JobTitle</h1>
                                    <div class="job-info-meta">
                                        <div class="job-info-meta-item">
                                            <i class="bi-cash"></i>
                                            <span id="jobPrice">@Model.JobPrice</span>
                                        </div>
                                        <div class="job-info-meta-item">
                                            <i class="bi-calendar"></i>
                                            <span id="jobPostedDate">Posted @daysAgo days ago</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                             <!-- Proposals List  -->
                            <div class="proposals-container">
                                <div class="proposals-header">
                                    <div class="d-flex align-items-center gap-3">
                                        <h2 class="proposals-title">Proposals</h2>
                                        <span class="proposals-count" id="proposalsCount">@Model.Proposals.Count Applications</span>
                                    </div>
                                </div>

                                 <!-- Proposals Container  -->
                                <div id="proposalsContainer">
                        @foreach (var proposal in Model.Proposals)
                        {
                            <div class="proposal-card" data-proposal-id="@proposal.Id">
                                <div class="proposal-header">
                                    <div class="freelancer-info">   
                                        <div class="freelancer-details">
                                            <h4>@proposal.FreelancerName</h4>
                                        </div>
                                    </div>
                                    <div class="proposal-price">
                                        <div class="price-amount">$@proposal.Price</div>

                                        <span class="proposal-status status-@proposal.Status.ToLower()">
                                            @proposal.Status
                                        </span>
                                    </div>
                                </div>

                                <div class="proposal-message">
                                    <p>@proposal.Message</p>
                                </div>
                                <div class="proposal-actions">
                                    <button class="action-btn btn-accept" onclick="acceptProposal(@proposal.Id)">
                                        <i class="bi-check-circle"></i>
                                        Accept
                                    </button>
                                    <button class="action-btn btn-reject" onclick="rejectProposal(@proposal.Id)">
                                        <i class="bi-x-circle"></i>
                                        Reject
                                    </button>
                                    <button class="action-btn btn-view-profile" onclick="viewProfile(@proposal.Id)">
                                        <i class="bi-person"></i>
                                        View Profile
                                    </button>
                                </div>
                            </div>
                        }
                                </div>

                                 <!-- Empty State (hidden by default)  -->
                                <div id="emptyState" class="empty-state" style="display: none;">
                                    <i class="bi-inbox"></i>
                                    <h4>No Proposals Yet</h4>
                                    <p>No freelancers have applied to this job yet. Share your job posting to attract more applicants!</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>


<script>

            // Get job ID from URL parameters
            function getJobIdFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('jobId') || '1';
            }

                const job = jobData[jobId];
                if (job) {
                    document.getElementById('jobTitle').textContent = job.title;
                    document.getElementById('jobPrice').textContent = job.price;
                    document.getElementById('jobLocation').textContent = job.location;
                    document.getElementById('jobPostedDate').textContent = job.postedDate;
                    document.getElementById('jobViews').textContent = job.views;
                }

                // Update proposals count
                document.getElementById('proposalsCount').textContent = `${proposals.length} Applications`;
            }

            // Accept proposal
            function acceptProposal(proposalId) {
                if (confirm('Are you sure you want to accept this proposal? This will notify the freelancer and start the project.')) {
                    const proposal = proposals.find(p => p.id === proposalId);
                    if (proposal) {
                        proposal.status = 'accepted';
                        
                        // Update UI
                        const proposalCard = document.querySelector(`[data-proposal-id="${proposalId}"]`);
                        const statusElement = proposalCard.querySelector('.proposal-status');
                        statusElement.textContent = 'Accepted';
                        statusElement.className = 'proposal-status status-accepted';
                        
                        // Disable action buttons
                        const actionButtons = proposalCard.querySelectorAll('.btn-accept, .btn-reject');
                        actionButtons.forEach(btn => {
                            btn.disabled = true;
                            btn.style.opacity = '0.5';
                        });
                        
                        alert(`Proposal from ${proposal.freelancerName} has been accepted!`);
                    }
                }
            }

            // Reject proposal
            function rejectProposal(proposalId) {
                if (confirm('Are you sure you want to reject this proposal? This action cannot be undone.')) {
                    const proposal = proposals.find(p => p.id === proposalId);
                    if (proposal) {
                        proposal.status = 'rejected';
                        
                        // Update UI
                        const proposalCard = document.querySelector(`[data-proposal-id="${proposalId}"]`);
                        const statusElement = proposalCard.querySelector('.proposal-status');
                        statusElement.textContent = 'Rejected';
                        statusElement.className = 'proposal-status status-rejected';
                        
                        // Disable action buttons
                        const actionButtons = proposalCard.querySelectorAll('.btn-accept, .btn-reject');
                        actionButtons.forEach(btn => {
                            btn.disabled = true;
                            btn.style.opacity = '0.5';
                        });
                        
                        alert(`Proposal from ${proposal.freelancerName} has been rejected.`);
                    }
                }
            }

            // Message freelancer
            function messageFreelancer(proposalId) {
                const proposal = proposals.find(p => p.id === proposalId);
                if (proposal) {
                    alert(`Opening message thread with ${proposal.freelancerName}...`);
                    // In real app, redirect to messaging system
                    // window.location.href = `messages.html?freelancerId=${proposal.freelancerId}`;
                }
            }

            // View freelancer profile
            function viewProfile(proposalId) {
                const proposal = proposals.find(p => p.id === proposalId);
                if (proposal) {
                    alert(`Opening profile for ${proposal.freelancerName}...`);
                    // In real app, redirect to freelancer profile
                    // window.location.href = `freelancer-profile.html?id=${proposal.freelancerId}`;
                }
            }

            // Sort proposals
            document.getElementById('sortProposals').addEventListener('change', function() {
                const sortBy = this.value;
                let sortedProposals = [...proposals];

                switch(sortBy) {
                    case 'newest':
                        // Sort by application date (newest first)
                        break;
                    case 'oldest':
                        // Sort by application date (oldest first)
                        break;
                    case 'price-low':
                        sortedProposals.sort((a, b) => a.price - b.price);
                        break;
                    case 'price-high':
                        sortedProposals.sort((a, b) => b.price - a.price);
                        break;
                    case 'rating':
                        sortedProposals.sort((a, b) => b.freelancerRating - a.freelancerRating);
                        break;
                }

                // Re-render proposals (in a real app, you'd update the DOM)
                console.log('Sorted proposals:', sortedProposals);
            });

            // Initialize page
            document.addEventListener('DOMContentLoaded', function() {
                loadJobInfo();
            });
        </script>