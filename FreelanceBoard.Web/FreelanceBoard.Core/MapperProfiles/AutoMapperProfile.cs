using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using FreelanceBoard.Core.Commands.UserCommands;
using FreelanceBoard.Core.Dtos;

namespace FreelanceBoard.Core
{
    public class AutoMapperProfile : Profile
    {
        public AutoMapperProfile()
        {
            // CreateUserCommand → ApplicationUser
            CreateMap<CreateUserCommand, Domain.Entities.ApplicationUser>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Generated by system
                .ForMember(dest => dest.IsBanned, opt => opt.Ignore()); // Default = false

            // UpdateUserCommand → ApplicationUser (Partial Update)
            CreateMap<UpdateUserCommand, Domain.Entities.ApplicationUser>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Prevent ID overwrite
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // AddProjectCommand → Project
            CreateMap<AddProjectCommand, Domain.Entities.Project>();

            // ApplicationUser ↔ ApplicationUserDto
            CreateMap<Domain.Entities.ApplicationUser, ApplicationUserDto>().ReverseMap();

            // LoginCommand → LoginUserDto (one-way)
            CreateMap<LoginCommand, LoginUserDto>();

            // UserUpdateDto → ApplicationUser (Partial Update)
            CreateMap<UserUpdateDto, Domain.Entities.ApplicationUser>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // ApplicationUser → UserWithProjectsDto
            CreateMap<Domain.Entities.ApplicationUser, UserWithProjectsDto>();

            // ApplicationUser → UserWithSkillsDto
            CreateMap<Domain.Entities.ApplicationUser, UserWithSkillsDto>();

            // Project → ProjectDto
            CreateMap<Domain.Entities.Project, ProjectDto>();

            // ApplicationUser → ApplicationUserFullProfileDto
            CreateMap<Domain.Entities.ApplicationUser, ApplicationUserFullProfileDto>();

            // Profile → ProfileDto
            CreateMap<Domain.Entities.Profile, ProfileDto>();

            // Skill ↔ SkillDto
            CreateMap<Domain.Entities.Skill, SkillDto>().ReverseMap();

            // AddSkillCommand → Skill
            CreateMap<AddSkillCommand, Domain.Entities.Skill>();

            // AddUserSkillCommand → Skill
            CreateMap<AddUserSkillCommand, Domain.Entities.Skill>();
        }
    }
}
